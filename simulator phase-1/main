#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <sstream>
using namespace std;

class core {
public:
    long long int x[32];
    int na=0; 
    int pc, size;
    vector<string> newmemory;
    std::string filename1;
    map<string, int> mnew;

        core(const std::string& filename) : filename1(filename), pc(0), size(0) {
        pc = 0;
        ifstream infile(filename1);
        string t;
        for (int i = 0; i < 32; i++) {
            x[i] = 0;
        }
        while (getline(infile, t)) {
            newmemory.push_back(t);
            pc = pc + 1;
            string newi = "";
            for (char c : t) {
                if (c == ':') {
                    mnew.insert({ newi, pc });
                }
                else {
                    newi = newi + c;
                }
            }
        }
        size = pc;
        infile.close();
        pc = 0;
    }

    string independentInstructionFetch() {
        cout<<newmemory[pc]<<" ";
        if (pc >= newmemory.size()) {
            return ""; 
        }
        string instruction = newmemory[pc];
        pc++;
        return instruction;
    }

    vector<string> independentInstructionDecode(const string& instruction) {
        vector<string> v;
        string token;
        for (char c : instruction) {
            if (c != ' ') {
                token += c;
            }
            else {
                v.push_back(token);
                token.clear();
            }
        }
        if (!token.empty()) {
            v.push_back(token);
        }
        return v;
    }

void independentExecute(vector<string>& v,int *memory){
    map<string, long long int> n;
    string opcode = v[0];
    string addressAdder="";
    string temp="";
    int t=0;
    int offset=0;
    if (opcode == "add") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int rs2 = stoi(v[3].substr(1));
        x[rd] = x[rs1] + x[rs2];
    } 
    else if (opcode == "sub") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int rs2 = stoi(v[3].substr(1));
        x[rd] = x[rs1] - x[rs2];
    } 
    else if (opcode == "addi") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int imm = stoi(v[3]);
        x[rd] = x[rs1] + imm;
        //cout<<x[rd]<<endl;
    }
    else if (opcode == "lw") {
        // cout<<v[2]<<endl;
        int rd = stoi(v[1].substr(1));
        addressAdder=v[2];
              if(!isdigit(v[2][0])){
                
                    x[rd] =  reinterpret_cast< long long int>(memory);
                    cout<<x[rd]<<endl;
                }
                else{
                            for(char d : addressAdder){
            if(isdigit(d)){
                temp+=d;
            }
            else{
                break;
            }
        }
        offset = stoi(temp);
        temp="";
        for(char d : addressAdder){
            if(d=='x'){
                temp+=d;
                t=1;
            }
            if(t==1){
               if(isdigit(d)){
                    temp+=d;
                } 
            }
        }
        int rs1 = stoi(temp.substr(1));
        if(na==0){
            x[rs1] = reinterpret_cast< long long int>(memory);
            na++;
        }
        int* array_ptr = reinterpret_cast<int*>(x[rs1]+offset);
        x[rd] = *array_ptr;
        //cout<<" "<<x[rd]<<" "<<x[rs1]<<endl;
                }

        temp="";t=0;
    } 
    else if (opcode == "sw") {
        int rd = stoi(v[1].substr(1));
        addressAdder = v[2];
        for (char d : addressAdder) {
            if (isdigit(d)) {
                temp += d;
            } else {
                break;
            }
        }
        offset = stoi(temp);
        temp = "";
        for (char d : addressAdder) {
            if (d == 'x') {
                temp += d;
                t = 1;
            }
            if (t == 1) {
                if (isdigit(d)) {
                    temp += d;
                }
            }
        }
        int rs1 = stoi(temp.substr(1));
        int* memory_ptr = reinterpret_cast<int*>(x[rs1] + offset);
        *memory_ptr = x[rd];
        temp = "";
        t = 0;
    }

    else if (opcode == "bne") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        
        if(x[rd] != x[rs1]){
            string label;
            label = v[3];
            jump(label);
            return;
        }
        v.clear();
    } 
     else if (opcode == "bgt") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        
        if(x[rd] > x[rs1]){
            string label;
            label = v[3];
            jump(label);
            return;
        }
    } 
         else if (opcode == "blt") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        
        if(x[rd] < x[rs1]){
            string label;
            label = v[3];
            jump(label);
            return;
        }
    } 
    else if (opcode == "bge") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        
        if(x[rd] >= x[rs1]){
            string label;
            label = v[3];
            jump(label);
            return;
        }
    } 
    else if (opcode == "beq") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        
        if(x[rd] == x[rs1]){
            string label;
            label = v[3];
            jump(label);
            return;
        }
    } 
    else if(opcode == "j" || opcode == "jump"){
        string label;
        label = v[1];
        jump(label);
        return;
    } 
    if(opcode==".data")
        {
            pc += 1;
            while(pc < newmemory.size() && newmemory[pc] != ".text")
            {
                
                string line1 = newmemory[pc];
                string opcode1, opcode2;
                std::istringstream iss1(line1);
                iss1 >> opcode1 >>opcode2;
                
                //cout<<opcode1<<" "<<opcode2;
                if(opcode2==".word")
                {
                    int count=0;
                    int x;
                    int memsize = 0;
                    for(int i=0; i<1024; i++)
                    {
                        if(i==0){
                             long long int lund = reinterpret_cast< long long int>(memory);
                            // n.insert({temp,lund});
                        }
                        if(memory[i]!=0)
                        {
                            memsize++;
                        }

                    }
                    while(iss1 >> x)
                    { 
                        memory[count] = x;
                        count++;
                    }
                }
                pc++;
            }    
        } 
}


    void jump(const string& label) {
        pc = mnew[label];
    }
};


class processor {
private:
    std::vector<core> cores;
    int *memory;
    int clock;

public:
    processor() {
        memory = new int[1024];
        cores.push_back(core("C:/Users/havis/OneDrive/Desktop/Project/test1.asm"));//choose path from the provided files
        cores.push_back(core("C:/Users/havis/OneDrive/Desktop/Project/test2.txt"));//choose path from the provided files
        clock = 0;
    }

    void independentRun() {
        string instruction = cores[0].independentInstructionFetch();
        string instruction1 = cores[1].independentInstructionFetch();
        while (!instruction.empty() && !instruction1.empty()) {
            vector<string> decodedInstruction = cores[0].independentInstructionDecode(instruction);
            cores[0].independentExecute(decodedInstruction, memory);
            instruction = cores[0].independentInstructionFetch();

            decodedInstruction = cores[1].independentInstructionDecode(instruction1);
            cores[1].independentExecute(decodedInstruction, memory+512);
            instruction1 = cores[1].independentInstructionFetch();
        }
        for(int i=0;i<1024;++i)
        {
            cout<<memory[i]<<" ";//Memory is printed as output please see core1 result at 0th element and core2's result at 512th element
        }
        cout<<endl;
        for(int i =0;i<32;++i)
        {
           // cout<<cores[0].x[i]<<" ";
        }
    }
};

int main() {
    processor p;
    p.independentRun(); // Start the execution of the processor
    return 0;
}
