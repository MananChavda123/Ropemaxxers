**Started working on Phase-3 on 06-04-2024**
06-03-2024
We created a struct named CacheBlock with elements tag,data,and valid.Valid was boolean data type,tag was int and data was vector<int>.We also created a Cache class 
in which we created basic cache methods:accessCache,insertBlock and getLatency.Here accessCache method searches if the given address already mentioned in 2d vector or not 
if it is write function then it does require to go to main memory to write to the given address if it is already happened once and mentioned in the cache , as it is stored 
in the data vector in present in the class can take the load to write that to main memory.In insertBlock, if the given address is not mentioned in cache 
then a new block is updated in 2d cache vector, so from then onwards it does not to bear the increase in latency.We declared an object of Cache class in 
the processor and simulated the cache functions from the processor class.

07-03-2024
In the processor class,we created a mechanism so that we can access cache based on the instruction it fetches.We created two variables to count misses and 
totalmemory accesses.We also added a missrate variable and calculated it for our half-baked program.

08-03-2024
Today, we need to perform memory operation which were held in lw and sw operation present in core class, so that the data does not have to recovered 
from main memory as it can be saved in cache.So, we required two boolean function and int function to check if the function are write or read operation 
and to pass address of the given data.Then we added replacement policies(LRU and MRU) in the insertBlock functions which can be executed if there are 
no empty slots. We implemented these replacement policies by adding access time. lru can be implemented by changing the address which is added firstly
and mru can be implemented by replacing the address which was added at the end.

09-03-2024
We made some minor changes in lw and sw functions .With this we added some cout statements and completed the project.
