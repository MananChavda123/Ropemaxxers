#include <iostream>
#include <fstream>
#include <string>
#include <vector>
using namespace std;

class core {
public:
    unsigned long long int x[32]; 
    int pc;
    vector<string> v;
        std::string filename1;

    core() {
        pc = 0;
        for (int i = 0; i < 32 ; i++) {
            x[i] = 0;
        }
         filename1 = R"(C:\Users\havis\OneDrive\Desktop\New Text Document.txt)";
        std::ifstream infile(filename1);
        if(infile.is_open())
        {
           std::cout<<"Success"<<std::endl;
        }
        infile.close();
    }
    
    void instructionFetch(int memory[]);
    void instructionDecode(const string& j,int memory[]);
    void execute(vector<string>& v,int memory[]);
    void jump(const string& label,const string& filename1,int memory[]);
};

void core::instructionFetch(int memory[]) {
    
    ifstream inputFile(filename1);
    if (!inputFile.is_open()) {
        cerr << "Error: Unable to open file " << filename1 << endl;
        return;
    }

    string s;
    while (getline(inputFile, s)) {
        instructionDecode(s,memory);
    }
    inputFile.close();
}

void core::instructionDecode(const string& instruction,int memory[]) {
    string token;
    for (char c : instruction) {
        if (c != ' ') {
            token += c;
        } else {
            v.push_back(token);
            token.clear();
        }
    }
    if (!token.empty()) {
        v.push_back(token);
    }
    execute(v,memory);
}

void core::execute(vector<string>& v,int memory[]) {
    string opcode = v[0];
    string addressAdder="";
    string temp="";
    int t=0;
    int offset=0;
    if (opcode == "add") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int rs2 = stoi(v[3].substr(1));
        x[rd] = x[rs1] + x[rs2];
        cout<<x[rd];
    } 
    else if (opcode == "sub") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int rs2 = stoi(v[3].substr(1));
        x[rd] = x[rs1] - x[rs2];
    } 
    else if (opcode == "addi") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int imm = stoi(v[3]);
        x[rd] = x[rs1] + imm;
        cout<<x[rd];
    }
    else if (opcode == "lw") {
        int rd = stoi(v[1].substr(1));
        addressAdder=v[2];
        for(char d : addressAdder){
            if(isdigit(d)){
                temp+=d;
            }
            else{
                break;
            }
        }
        offset = stoi(temp);
        temp="";
        for(char d : addressAdder){
            if(d=='x'){
                temp+=d;
                t=1;
            }
            if(t==1){
               if(isdigit(d)){
                    temp+=d;
                } 
            }
        }
        
        int rs1 = stoi(temp.substr(1));
        x[rs1] = reinterpret_cast<unsigned long long int>(memory) ;
        unsigned long long int xavi=x[rs1]+offset;
        int* array_ptr = reinterpret_cast<int*>(xavi);
        x[rd] = *array_ptr; 
        temp="";t=0;
    } 
else if (opcode == "sw") {
    int rd = stoi(v[1].substr(1));
    addressAdder = v[2];
    for (char d : addressAdder) {
        if (isdigit(d)) {
            temp += d;
        } else {
            break;
        }
    }
    offset = stoi(temp);
    temp = "";
    for (char d : addressAdder) {
        if (d == 'x') {
            temp += d;
            t = 1;
        }
        if (t == 1) {
            if (isdigit(d)) {
                temp += d;
            }
        }
    }
    int rs1 = stoi(temp.substr(1));
    int* memory_ptr = reinterpret_cast<int*>(x[rs1] + offset);
    *memory_ptr = x[rd];
     for(int i=0;i<1024;i++){
            cout<<memory[i]<<" ";    
        }
    temp = "";
    t = 0;
}

    else if (opcode == "bne") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        
        if(x[rd] != x[rs1]){
            string label;
            label = v[3];
            jump(label,filename1,memory);
        }
    } 
    else if (opcode == "beq") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        
        if(x[rd] == x[rs1]){
            string label;
            label = v[3];
            jump(label,filename1,memory);
        }
    } 
    else if(opcode == "j" || opcode == "jump"){
        string label;
        label = v[1];
        jump(label,filename1,memory);
    }
    else {
    }
    pc++;
    v.clear();
}

void core::jump(const string& label,const string& filename1,int memory[]){
    ifstream inputFile(filename1);
    if (!inputFile.is_open()) {
        cerr << "Error: Unable to open file " << filename1 << endl;
        return;
    }

    string s;
    bool foundLabel = false;
    while (getline(inputFile, s)) {
        if (foundLabel) {
            instructionDecode(s,memory);
        } else {
            string lowercaseS;
            for (char c : s) {
                lowercaseS += c;
            }
            size_t pos = lowercaseS.find(label);
            if (pos != string::npos) {
                foundLabel = true;
            }
        }
    }
    inputFile.close();
}

class processor{
private:
    std::vector<core> cores;
    int memory[1024];
    int clock;
public:
    processor(){
       
        cores.resize(2);
        core c1;
        c1 = cores[0];
        clock = 0; 
     
    }
    
    void run(){
        cores[0].instructionFetch(memory);
        
        // while(clock < max(cores[0].v.size(),cores[1].v.size())){
        //     for(int i=0;i<2;++i){
        //         if(clock<cores[i].v.size()){
        //             cores[0].instructionFetch(memory);
        //         }
        //     }
        // }
    }   
};
        

int main() {
    core c;
    processor p;
    p.run();
    
    return 0;
}
