#include <iostream>
#include <string>
#include <vector>
#include<map>
using namespace std;

class core{
public:
    int x[32][32];
    int pc;
     vector<string> v;

    core() {
        pc = 0;
        for (int i = 0; i < 32; i++) {
            for(int j=0;j<32;j++)
                x[i][j] = 0;
        }
    }

    void instructionFetch(vector<string> &memory);
    void instructionDecode(string j);
    void execute(vector<string>& v);
    void jump(string label);
};

void core::instructionFetch(vector<string> &memory) {
    string s;
    s=memory[pc];
    instructionDecode(s);
    pc = pc + 1;
}

void core::instructionDecode(string instruction) {
   
    string token;

    for (char c : instruction) {
        if (c != ' ') {
            token += c;
        } else {
            v.push_back(token);
            token.clear();
        }
    }
    string newi = "";
    map<string,int> m;
    for(char c : token)
    {
        if(c == ':')
        {
            m.insert({newi,pc});
        }
        else{
            newi = newi + c;
        }
    }
    if (!token.empty()) {
        v.push_back(token);
    }

    execute(v);
}

void core::execute(vector<string>& v) {
    string opcode = v[0];
    string addressAdder="";
    string temp="";
    int t=0;
    int addressFinder=0;
    if (opcode == "add") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int rs2 = stoi(v[3].substr(1));
        x[rd][0] = x[rs1][0] + x[rs2][0];
    } 
    else if (opcode == "sub") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int rs2 = stoi(v[3].substr(1));
        x[rd][0] = x[rs1][0] - x[rs2][0];
    } 
    else if (opcode == "addi") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int rs2 = stoi(v[3]);
        x[rd][0] = x[rs1][0] + rs2;
    }
    else if (opcode == "subi") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int rs2 = stoi(v[3]);
        x[rd][0] = x[rs1][0] - rs2;
    }
    else if (opcode == "mul") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int rs2 = stoi(v[3]);
        x[rd][0] = x[rs1][0] * x[rs2][0];
    }
    else if (opcode == "lw") {
        int rd = stoi(v[1].substr(1));
        addressAdder=v[2];
        for(char d : addressAdder){
            if(isdigit(d)){
                temp+=d;
            }
            else{
                break;
            }
        }
        addressFinder = stoi(temp)/4;
        temp="";
        for(char d : addressAdder){
            if(d=='x'){
                temp+=d;
                t=1;
            }
            if(t==1){
               if(isdigit(d)){
                    temp+=d;
                } 
            }
        }
        int rs1 = stoi(v[2].substr(1));
        x[rd][0] = x[rs1][addressFinder]; 
        temp="";t=0;
    } 
    else if (opcode == "sw") {
        int rd = stoi(v[1].substr(1));
        addressAdder=v[2];
        for(char d : addressAdder){
            if(isdigit(d)){
                temp+=d;
            }
            else{
                break;
            }
        }
        addressFinder = stoi(temp)/4;
        temp="";
        for(char d : addressAdder){
            if(d=='x'){
                temp+=d;
                t=1;
            }
            if(t==1){
               if(isdigit(d)){
                    temp+=d;
                } 
            }
        }
        int rs1 = stoi(v[2].substr(1));
        x[rs1][addressFinder] = x[rd][0]; 
        temp="";t=0;
    } 
    else if(opcode == ".data"){
        
    }
    else if (opcode == "bne") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        
        if(x[rd][0] != x[rs1][0]){
            string label;
            label = v[3];
            jump(label);
        }
    } 
    else if (opcode == "beq") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        
        if(x[rd][0] == x[rs1][0]){
            string label;
            label = v[3];
            jump(label);
        }
    } 
    else if(opcode == "j" || opcode == "jump"){
        string label;
        label = v[1];
        jump(label);
    }
    else {
    }
}

void core::jump(string label){
    
    return;
}


class processor{
private:
        std::vector<core> cores;
        vector<string> memory;
        int clock;
public:
        
        processor(){
        memory.resize(256);
        for(int i =0 ;i<256;++i){
            memory[i] = "";
        }
        cores.resize(2);
        core r1,r2;
        r1 = cores[0];
        r2 = cores[1];
        clock = 0; 
        }
        void run(){
            while(clock < max(cores[0].v.size(),cores[1].v.size())){
                for(int i=0;i<2;++i){
                    if(clock<cores[i].v.size()){
                        cores[i].execute(cores[i].v);
                    }
                }
            }
        }
        void memoryFetch(){
        string t;
        if(getline(cin,t)){
            while(memory[cores[0].pc]!="addi x0 x0 0"){
                getline(cin,t);
                memory.push_back(t);
                cores[0].pc = cores[0].pc + 1;
            }
            cores[0].pc=0;
        }
    }
};
        

int main() {
    core r;
    processor sim;
    return 0;
}
