#include <iostream>
#include <string>
#include <vector>
using namespace std;

class core {
public:
    unsigned long long int x[32]; 
    int pc;
    vector<string> v;
  
    core() {
        pc = 0;
        for (int i = 0; i < 32 ; i++) {
            x[i] = i;
        }
    }

    void instructionFetch(int memory[]);
    void instructionDecode(string j,int memory[]);
    void execute(vector<string>& v,int memory[]);
    void jump(string label);
};

void core::instructionFetch(int memory[]) {
    

    string s;
    getline(cin, s);
        instructionDecode(s,memory);
    
}

void core::instructionDecode(string instruction,int memory[]) {
   
    string token;
    for (char c : instruction) {
        if (c != ' ') {
            token += c;
        } else {
            v.push_back(token);
            token.clear();
        }
    }
    if (!token.empty()) {
        v.push_back(token);
    }

    execute(v,memory);
}

void core::execute(vector<string>& v,int memory[]) {
    string opcode = v[0];
    string addressAdder="";
    string temp="";

    int newmemory2[1024];
   
    int t=0;
    int offset=0;
    if (opcode == "add") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int rs2 = stoi(v[3].substr(1));
        x[rd] = x[rs1] + x[rs2];
    } 
    else if (opcode == "sub") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int rs2 = stoi(v[3].substr(1));
        x[rd] = x[rs1] - x[rs2];
    } 
    else if (opcode == "addi") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        int imm = stoi(v[3]);
        x[rd] = x[rs1] + imm;
        cout<<x[rd];
    }
        else if (opcode == "lw") {
        int rd = stoi(v[1].substr(1));
        addressAdder=v[2];
        for(char d : addressAdder){
            if(isdigit(d)){
                temp+=d;
            }
            else{
                break;
            }
        }
        offset = stoi(temp);
        temp="";
        for(char d : addressAdder){
            if(d=='x'){
                temp+=d;
                t=1;
            }
            if(t==1){
               if(isdigit(d)){
                    temp+=d;
                } 
            }
        }
        memory[0]=10;
        memory[1]=1232;
        memory[2]=10;
        int rs1 = stoi(temp.substr(1));
        cout<<&memory<<endl;
        unsigned long long int xavi = reinterpret_cast<unsigned long long int>(memory) ;
        cout<<xavi<<endl;
        xavi = xavi + offset;
        cout<<offset<<endl;
        x[rs1]=xavi;
        cout<<x[rs1]<<endl;
        int* array_ptr = reinterpret_cast<int*>(xavi);
        x[rd] = *array_ptr; 
        cout<<x[rd]<<endl;
        temp="";t=0;
        for(int i=0;i<1024;++i){
            cout<<memory[i]<<" ";
        }
    } 
    else if (opcode == "sw") {
        int rd = stoi(v[1].substr(1));
        addressAdder=v[2];
        for(char d : addressAdder){
            if(isdigit(d)){
                temp+=d;
            }
            else{
                break;
            }
        }
        offset = stoi(temp);
        temp="";
        for(char d : addressAdder){
            if(d=='x'){
                temp+=d;
                t=1;
            }
            if(t==1){
               if(isdigit(d)){
                    temp+=d;
                } 
            }
        }
        int rs1 = stoi(temp.substr(1));
          unsigned long long int* xavi = reinterpret_cast<unsigned long long int*>(x[rs1] + offset);
        *xavi = x[rd];
        temp="";t=0;
    } 
    else if (opcode == "bne") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        
        if(x[rd] != x[rs1]){
            string label;
            label = v[3];
            jump(label);
        }
    } 
    else if (opcode == "beq") {
        int rd = stoi(v[1].substr(1));
        int rs1 = stoi(v[2].substr(1));
        
        if(x[rd] == x[rs1]){
            string label;
            label = v[3];
            jump(label);
        }
    } 
    else if(opcode == "j" || opcode == "jump"){
        string label;
        label = v[1];
        jump(label);
    }
    else {
    }
    pc++;
}

void core::jump(string label){
    pc = stoi(label);
}

class processor{
private:
    std::vector<core> cores;
    int memory[1024];
    int clock;
public:
    processor(){
       
        cores.resize(2);
        core c1;
        c1 = cores[0];
        clock = 0; 
     
    }
    
    void run(){
        cores[0].instructionFetch(memory);
        while(clock < max(cores[0].v.size(),cores[1].v.size())){
            for(int i=0;i<2;++i){
                if(clock<cores[i].v.size()){
                    cores[0].instructionFetch(memory);
                }
            }
        }
    }
    
};
        

int main() {
    core c;
    processor p;
    p.run();
    
    return 0;
}
